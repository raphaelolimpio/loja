import 'dart:convert';
import 'package:http/http.dart' as http;

class NotificacaoService {
  final String baseUrl = 'http://localhost:3000/notificacoes';

  /// üîç Lista todas as notifica√ß√µes
  Future<List> getNotificacoes() async {
    final response = await http.get(Uri.parse(baseUrl));
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception('Erro ao carregar notifica√ß√µes');
    }
  }

  /// ‚ûï Adiciona uma nova notifica√ß√£o
  Future<void> addNotificacao(Map<String, dynamic> notificacao) async {
    final response = await http.post(
      Uri.parse(baseUrl),
      headers: {'Content-Type': 'application/json'},
      body: json.encode(notificacao),
    );
    if (response.statusCode != 201) {
      throw Exception('Erro ao criar notifica√ß√£o');
    }
  }

  /// üîÑ Atualiza o status da notifica√ß√£o (marcar como lida/n√£o lida)
  Future<void> updateStatus(int id, bool lida) async {
    final response = await http.put(
      Uri.parse('$baseUrl/$id'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({'lida': lida}),
    );
    if (response.statusCode != 200) {
      throw Exception('Erro ao atualizar status da notifica√ß√£o');
    }
  }

  /// ‚ùå Exclui uma notifica√ß√£o espec√≠fica
  Future<void> deleteNotificacao(int id) async {
    final response = await http.delete(Uri.parse('$baseUrl/$id'));
    if (response.statusCode != 200) {
      throw Exception('Erro ao excluir notifica√ß√£o');
    }
  }

  /// üö´ Exclui todas as notifica√ß√µes
  Future<void> deleteTodasNotificacoes() async {
    final response = await http.delete(Uri.parse(baseUrl));
    if (response.statusCode != 200) {
      throw Exception('Erro ao excluir todas as notifica√ß√µes');
    }
  }
}
